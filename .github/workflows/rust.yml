name: Create Release

on:
  push:
    tags:
      - "*"  # Trigger on any tag pushes

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      # 1. Checkout the repository code
      - name: Checkout Code
        uses: actions/checkout@v4

      # 2. Cache Cargo Registry
      - name: Cache Cargo Registry
        uses: actions/cache@v3
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      # 3. Cache Cargo Git Repositories
      - name: Cache Cargo Git Repositories
        uses: actions/cache@v3
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-git-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-git-

      # 4. Cache Build Artifacts (the target directory)
      - name: Cache Build Output
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.os }}-cargo-target-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-target-

      # 5. Build your project with Cargo in release mode
      - name: Build with Cargo
        run: cargo build --release

      # 6. Locate the compiled binary
      - name: Locate Binary File
        id: locate_binary
        run: |
          # Adjust the binary name as needed. Here we assume the built binary is named "DynaRust"
          binary_path=$(find target/release -maxdepth 1 -type f -executable -name 'DynaRust*')
          if [ -z "$binary_path" ]; then
            echo "Binary file not found!"
            exit 1
          else
            echo "Binary file found: ${binary_path}"
            echo "BINARY_PATH=${binary_path}" >> $GITHUB_ENV
          fi

      # 7. Validate and fix the tag name if it matches a 40-character commit SHA
      - id: validate_tag
        name: Validate and Fix Tag Name
        shell: bash
        run: |
          # Extract the tag name from the Git ref (removing 'refs/tags/')
          TAG="${GITHUB_REF##*/}"
          echo "Original tag: ${TAG}"
          
          # If the tag is exactly 40 hex characters (i.e. a commit SHA),
          # adjust the tag by prefixing it with 'v' and shortening it to 7 characters.
          if [[ "${TAG}" =~ ^[0-9a-f]{40}$ ]]; then
            NEW_TAG="v${TAG:0:7}"
            echo "Tag appears to be a commit SHA. Adjusting tag to: ${NEW_TAG}"
            TAG="${NEW_TAG}"
          else
            echo "Tag is valid: ${TAG}"
          fi
          # Set the (possibly adjusted) tag as output for later steps
          echo "tag=${TAG}" >> "$GITHUB_OUTPUT"

      # 8. Create the GitHub Release using the validated tag
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.validate_tag.outputs.tag }}
          release_name: "Release ${{ steps.validate_tag.outputs.tag }}"
          draft: false
          prerelease: false

      # 9. Upload the built binary as a release asset
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.BINARY_PATH }}
          asset_name: DynaRust
          asset_content_type: application/octet-stream
